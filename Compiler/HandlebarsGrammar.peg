@namespace CompiledHandlebars.Compiler
@classname HbsParser
@accessibility internal
@using CompiledHandlebars.Compiler.AST
@using CompiledHandlebars.Compiler.AST.Expressions
@using System.Linq

@members
{
    private static void AddError(string message, HandlebarsSyntaxErrorKind kind, Cursor state)
    {
        var existing = state["errors"] as IList<HandlebarsSyntaxError>;
        var newList = existing == null ? new List<HandlebarsSyntaxError>() : existing.ToList();
        newList.Add(new HandlebarsSyntaxError(        
            message,
            kind,
            state.Line,
            state.Column           
        ));
        state["errors"] = newList.AsReadOnly();
    }
}

Template<HandlebarsTemplate> 
    = markup:MarkupLiteral EOF { new StaticHandlebarsTemplate(markup, state["errors"] as IList<HandlebarsSyntaxError>)}
    / model:ModelToken preItems:(Element*) RenderBodyToken postItems:(Element*) EOF { new HandlebarsLayout(preItems, postItems, model, state["errors"] as IList<HandlebarsSyntaxError>)}
    / model:ModelToken Whitespace layout:LayoutToken items:(Element*) EOF { new LayoutedHandlebarsTemplate(layout, items, model, state["errors"] as IList<HandlebarsSyntaxError>)}
    / model:ModelToken items:(Element*) EOF {new HandlebarsTemplate(items, model, state["errors"] as IList<HandlebarsSyntaxError>)}     

ModelToken <NamespaceOrTypeName>
    = Opening ModelKeyword Whitespace value:NamespaceOrTypeName Closing { value }
    / v:Opening ModelKeyword (!Closing .)* Closing #STATE{ AddError("Malformed ModelToken. Syntax is: {{model MemberExpression}}", HandlebarsSyntaxErrorKind.MalformedModelToken, state); } { default(NamespaceOrTypeName) }
    / v:.* #STATE{ AddError("ModelToken is expected as first Token of a Handlebars-Template", HandlebarsSyntaxErrorKind.MissingModelToken, state); } { default(NamespaceOrTypeName)  }

LayoutToken
    = Opening LayoutKeyword value:MemberExpression Closing { value.ToString() }

RenderBodyToken 
    = Opening RenderBodyKeyword Closing

//------------------------------
//        ASTElements
//------------------------------

Element 
    =  CommentToken / Node / Leaf

CommentToken <ASTElementBase>
    = Opening CommentIdentifier val:Comment Closing{ val }

Leaf <ASTElementBase>
    = Opening value:HandlebarsLeaf Closing { value }
    / EscapedOpening value:EncodableHandlebarsLeaf EscapedClosing { {value.SetTokenType(TokenType.Unencoded); return value;} }    
    / MarkupLiteral

HandlebarsLeaf <ASTElementBase>
    = PartialCallIdentifier val:PartialCall { val } 
    / UnencodedTokenIdentifier val:YieldStatement { {val.SetTokenType(TokenType.Unencoded); return val;} }  
    / YieldStatement
    / HelperCall    

EncodableHandlebarsLeaf <EncodableHandlebarsLeaf>
    = YieldStatement
    / HelperCall

PartialCall <PartialCall>
    = templateName:NamespaceOrTypeName member:(Expression/LiteralExpression) { new PartialCall(templateName, member, templateNameStart.Line, templateNameStart.Column)}
    / templateName:NamespaceOrTypeName { new PartialCall(templateName, new MemberExpression(new ThisIdentifier(null)), templateNameStart.Line, templateNameStart.Column) }
    / v:(!Closing .)* #STATE{ AddError("Malformed PartialCall Token. Syntax is: {{> TemplateName}} or {{> TemplateName MemberName}}", HandlebarsSyntaxErrorKind.MalformedPartialCallToken, state); } { new PartialCall(null, null, vStart.Line, vStart.Column) }

YieldStatement <YieldStatement>
    = val:Expression &Closing {new YieldStatement(val,valStart.Line,valStart.Column)}

HelperCall <HelperCall>
    = name:FunctionIdentifier parameters:((Expression/LiteralExpression)+) &Closing { new HelperCall(name, parameters, nameStart.Line, nameStart.Column) }

MarkupLiteral <MarkupLiteral> 
    = &{ state["trimStart"]==true}value:(LiteralContent+) &TrimOpening #STATE{ state["trimStart"]=false; } { new MarkupLiteral(string.Concat(value), true, true, valueStart.Line, valueStart.Column)}
    / &{ state["trimStart"]==true} value:(LiteralContent+) #STATE{ state["trimStart"]=false; } { new MarkupLiteral(string.Concat(value), true, false, valueStart.Line, valueStart.Column)}
    / value:(LiteralContent+) &TrimOpening { new MarkupLiteral(string.Concat(value), false, true, valueStart.Line, valueStart.Column)}
    / value:(LiteralContent+) { new MarkupLiteral(string.Concat(value), valueStart.Line, valueStart.Column)}

LiteralContent 
    = "\\" val:"\\" &HandlebarsToken { val }
    / "\\"val:HandlebarsToken  { val }
    / (!HandlebarsToken .)

HandlebarsToken
    = Opening (!AnyOpening !Closing .)+ Closing
    / EscapedOpening (!AnyOpening !EscapedClosing .)+ EscapedClosing
    / CommentToken { "Comment" }

Comment <ASTElementBase>
    = "--" val:(!MultilineCommentClosing .)* "--" { new CommentLiteral(CommentType.Multi, string.Concat(val), valStart.Line, valStart.Column)}
    / val:(!Closing .)* { new CommentLiteral(CommentType.Single, string.Concat(val), valStart.Line, valStart.Column)}
    
//-----------------------------------------------
//    Nodes and Blocks
//-----------------------------------------------

Node <ASTElementBase>
    = WithBlock
    / EachBlock
    / IfBlock
	 / EqualsBlock
    / Opening BlockOpeningIdentifier name:(!Closing .)+ Closing #STATE{ AddError(string.Format("Unknown Block Token '{0}'!",string.Concat(name)), HandlebarsSyntaxErrorKind.UnknownBlock, state);} { new MarkupLiteral(null,0,0)}

BlockBody 
    = Element*

//#With
WithBlock <WithBlock>
    = member:WithOpeningToken body:BlockBody ElseToken elseBlock:BlockBody WithClosingToken { new WithBlock(member, body, elseBlock, memberStart.Line, memberStart.Column )}
    / member:WithOpeningToken body:BlockBody WithClosingToken { new WithBlock(member, body, memberStart.Line, memberStart.Column )}
    / member:WithOpeningToken body:BlockBody #STATE{ AddError("Missing '{{/with}}' for {{#with}}", HandlebarsSyntaxErrorKind.MalformedBlock, state); } { new WithBlock(null, null, 0, 0)}   

WithOpeningToken <MemberExpression>
    = Opening BlockOpeningIdentifier WithKeyword val:MemberExpression Closing { val }
    / Opening BlockOpeningIdentifier WithKeyword v:(!Closing .)* Closing #STATE{ AddError("Missing MemberExpression in #with Token. Syntax: {{#with MemberExpression}}", HandlebarsSyntaxErrorKind.MissingMemberExpression, state ); } { new MemberExpression(null)}

WithClosingToken
    = Opening BlockClosingIdentifier WithKeyword Closing

//#Each
EachBlock <EachBlock>
    = member:EachOpeningToken body:BlockBody EachClosingToken {new EachBlock(member, body, memberStart.Line, memberStart.Column)}

EachOpeningToken <MemberExpression>
    = Opening BlockOpeningIdentifier EachKeyword member:MemberExpression Closing { member }

EachClosingToken
    = Opening BlockClosingIdentifier EachKeyword Closing

//#Equals
EqualsBlock <EqualsBlock>
	= expr:EqualsOpeningToken body:BlockBody ElseToken elseBlock:BlockBody EqualsClosingToken { new EqualsBlock(expr, body, elseBlock, exprStart.Line, exprStart.Column) }
	/ expr:EqualsOpeningToken body:BlockBody EqualsClosingToken { new EqualsBlock(expr, body, exprStart.Line, exprStart.Column) }

EqualsOpeningToken <EqualsExpression>
   = Opening BlockOpeningIdentifier EqualsKeyword lhs:(Expression/LiteralExpression) rhs:(Expression/LiteralExpression) Closing { new EqualsExpression(lhs, rhs) }

EqualsClosingToken 
	= Opening BlockClosingIdentifier EqualsKeyword Closing

//#If
IfBlock <IfBlock>
  = expr:IfOpeningToken body:BlockBody ElseToken elseBlock:BlockBody IfClosingToken { new IfBlock(expr, IfType.If, elseBlock, body, exprStart.Line, exprStart.Column) }
  / expr:UnlessOpeningToken body:BlockBody ElseToken elseBlock:BlockBody UnlessClosingToken { new IfBlock(expr, IfType.Unless, elseBlock, body, exprStart.Line, exprStart.Column) }
  / expr:IfOpeningToken body:BlockBody IfClosingToken { new IfBlock(expr, IfType.If, body, exprStart.Line, exprStart.Column) }
  / expr:UnlessOpeningToken body:BlockBody UnlessClosingToken { new IfBlock(expr, IfType.Unless, body, exprStart.Line, exprStart.Column) }

IfOpeningToken <Expression>
  = Opening BlockOpeningIdentifier IfKeyword expr:Expression Closing { expr }

IfClosingToken
  = Opening BlockClosingIdentifier IfKeyword Closing

UnlessOpeningToken <Expression>
  = Opening BlockOpeningIdentifier UnlessKeyword expr:Expression Closing { expr }

UnlessClosingToken
  = Opening BlockClosingIdentifier UnlessKeyword Closing

ElseToken
  = Opening ElseKeyword Closing


//-----------------------------------------------
//    Expressions, Statements
//-----------------------------------------------

LiteralExpression <LiteralExpression>
    = Whitespace LiteralDelimiter val:(!LiteralDelimiter .)* LiteralDelimiter { new LiteralExpression(string.Concat(val)) }

Expression <Expression>
    = SpecialExpression
    / MemberExpression

SpecialExpression <Expression>
    = Whitespace SpecialExpressionIdentifier v:SpecialExpressionInner { v }

SpecialExpressionInner <Expression>
        = FirstKeyword { new FirstExpression() }
        / LastKeyword { new LastExpression() }
        / IndexKeyword { new IndexExpression() }
        / KeyKeyword {new KeyExpression() }
        / v:(!SpecialKeyword Identifier) #STATE{ AddError(string.Format("Unkown Special Expression '{0}'", v), HandlebarsSyntaxErrorKind.UnknownSpecialExpression, state); } { new MemberExpression(new ThisIdentifier(null)) }   

MemberExpression <MemberExpression>
    = Whitespace value:(SpecialPath/MemberPath) Whitespace { new MemberExpression(value)}

MemberPath     
    = NestedMemberIdentifier
    / MemberIdentifier

SpecialPath
    = ThisBasedPath
    / RootBasedPath

RootBasedPath<IdentifierElement> 
    = SpecialExpressionIdentifier RootKeyword NameDelimiter next:MemberPath { new RootIdentifier(next)}
    / SpecialExpressionIdentifier RootKeyword { new RootIdentifier(null) }

ThisBasedPath<IdentifierElement> 
    = ThisKeyword NameDelimiter next:MemberPath { new ThisIdentifier(next)}
    / ThisKeyword { new ThisIdentifier(null) }

//Last Identifier Element => no next
MemberIdentifier <IdentifierElement>
    = value:NameIdentifier {new Identifier(value, null)}

NestedMemberIdentifier
    = ParentContextName
    / ChildContextName

ParentContextName <IdentifierElement>
    = ParentPathLiteral next:MemberPath {new PathUp(next)}

ChildContextName <IdentifierElement>
    = value:NameIdentifier NameDelimiter next:MemberPath {new Identifier(value, next)}
    / value:NameIdentifier NameDelimiter (NameDelimiter)+ MemberPath #STATE{ AddError("Malformed MemberExpression: multiple identifier delimiter!", HandlebarsSyntaxErrorKind.MalformedMemberExpression, state);} { new Identifier(null, null)}
    / value:NameIdentifier NameDelimiter #STATE{ AddError("Malformed MemberExpression: identifier delimiter without subsequent identifier!", HandlebarsSyntaxErrorKind.MalformedMemberExpression,  state);} { new Identifier(null, null)}
      

NameIdentifier <string>
    = (!ReservedKeywords) val:Identifier {string.Concat(val)}

//TODO: FIX there can be delimiters in these identifiers
FunctionIdentifier <string>
    = (!ReservedKeywords) val:Identifier {string.Concat(val)}


//Ideas from https://slps.github.io/zoo/cs/csharp-msft-ls-4.0.html    
NamespaceOrTypeName <NamespaceOrTypeName>
    = Whitespace val:TypeNameSegment args:TypeArgumentList { new GenericTypeName(string.Concat(val), args)}
    / Whitespace val:TypeNameSegment { new NamespaceOrTypeName(string.Concat(val)) }

TypeNameSegment <string> -memoize
    = a:TypeNameSegment NameDelimiter b:Identifier {string.Join(".",a,string.Concat(b))}
    / v:Identifier { string.Concat(v) }    

TypeArgumentList <IList<NamespaceOrTypeName>>
    = "<" args:TypeArguments ">" { args }

TypeArgument 
    = NamespaceOrTypeName

TypeArguments <IList<NamespaceOrTypeName>> -memoize
    = args:TypeArguments "," val:TypeArgument { { args.Add(val); return args; } }
    / val:TypeArgument { new List<NamespaceOrTypeName>() { val } }

Identifier
    = ([a-z]i / [0-9] / "_" )+

//-------------------------------
//      Keywords and Literals
//-------------------------------

ReservedKeywords 
  = ElseKeyword / RenderBodyKeyword
 
SpecialExpressionIdentifier = "@"  
SpecialKeyword = FirstKeyword / LastKeyword / IndexKeyword / RootKeyword 
PartialCallIdentifier = ">"
BlockOpeningIdentifier = "#"
BlockClosingIdentifier = "/"
TrimWhitespaceIdentifier = "~"
CommentIdentifier = "!"
UnencodedTokenIdentifier = "&"
WithKeyword = "with"
EachKeyword = "each"
IfKeyword = "if"
UnlessKeyword = "unless"
ElseKeyword = "else" / "^"
EqualsKeyword = "equals"
RenderBodyKeyword = "body"
ModelKeyword = "model"
LayoutKeyword = "layout"
RootKeyword = "root"
FirstKeyword = "first"
LastKeyword = "last"
IndexKeyword = "index"
KeyKeyword = "key"
AnyOpening = EscapedOpening / Opening
Opening = "{{"TrimWhitespaceIdentifier?
Closing = TrimWhitespace"}}"
EscapedOpening = "{{{"TrimWhitespaceIdentifier?
EscapedClosing = TrimWhitespace"}}}"
MultilineCommentClosing = "--"Closing
TrimWhitespace = (TrimWhitespaceIdentifier #STATE{ state["trimStart"]=true; }) / #STATE{ state["trimStart"]=false; }
TrimOpening = ("{{{{"/"{{{"/"{{")TrimWhitespaceIdentifier
ParentPathLiteral = "../"
NameDelimiter = "." / "/"
LiteralDelimiter = "\"" / "'"
Whitespace = (" " / "\n" / "\r" / "\t")*
ThisKeyword = "this" / ("."!".")


//-------------------------------
//      Miscellaneous
//-------------------------------

EOF 
  = !.
  / hbsToken:HandlebarsToken #STATE{ AddError(string.Format("Unable to parse HandlebarsToken '{0}'", hbsToken), HandlebarsSyntaxErrorKind.MalformedHandlebarsToken, state); } {hbsToken}
  / c:. #STATE{ AddError(string.Format("Unexpected Character '{0}'", c), HandlebarsSyntaxErrorKind.UnexpectedCharacter, state); } { c }   
